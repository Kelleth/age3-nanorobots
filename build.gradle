apply plugin: 'application'
apply plugin: 'maven-publish'

mainClassName = 'org.age.node.Bootstrapper'

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    configurations {
        all*.exclude group: 'commons-logging', module: 'commons-logging'
        markdownDoclet
    }

    group = 'org.age'
    sourceCompatibility = 1.8
    version = '0.2-SNAPSHOT'

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'org.testng:testng:+'
        testCompile 'org.mockito:mockito-all:+'
        testCompile 'org.uncommons:reportng:+'
        testCompile 'com.google.inject:guice:+'
        testCompile 'org.assertj:assertj-core:+'
        testCompile 'org.assertj:assertj-guava:+'

        runtime 'org.codehaus.groovy:groovy-all:+'

        markdownDoclet 'ch.raffael.pegdown-doclet:pegdown-doclet:+'
    }

    tasks.withType(JavaCompile).all { JavaCompile compile ->
        if (System.getenv('CHECKER_FRAMEWORK')) {
            compile.options.debug = true
            compile.options.compilerArgs = [
                    '-version',
                    '-implicit:class',
                    '-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
                    '-AassumeAssertionsAreEnabled'
            ]
            options.fork = true
            options.forkOptions.executable = System.getenv('CHECKER_FRAMEWORK') + "/checker/bin/javac"
        }
    }

    test {
        useTestNG() {
            excludeGroups 'integration'
        }
    }

    task integrationTest(type: Test, dependsOn: 'test') {
        include "**/*IT.class"
        useTestNG() {
            includeGroups 'integration'
            parallel 'instances'
            threadCount 1
        }
        forkEvery 1
        reports.html.destination = file("${reportsDir}/integration")
        reports.junitXml.destination = file("${buildDir}/integration-results")
    }

    tasks.withType(Test) {
        scanForTestClasses = false
        enableAssertions = true
//    testLogging.showStandardStreams = true
        include "**/*Test.class"
        options {
            listeners << 'org.uncommons.reportng.HTMLReporter'
            listeners << 'org.uncommons.reportng.JUnitXMLReporter'
        }
        ext.useDefaultListeners = true
    }

    javadoc.options {
        docletpath = configurations.markdownDoclet.files.asType(List)
        doclet = "ch.raffael.doclets.pegdown.PegdownDoclet"
        addStringOption("parse-timeout", "10")
    }

    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
}

dependencies {
    compile 'javax.inject:javax.inject:1'
    compile 'org.springframework:spring-context:+'
    compile 'org.springframework:spring-test:+'
    compile('com.hazelcast:hazelcast:+') {
        // Not needed and would introduce a lot of duplicated annotations
        exclude group: 'net.sourceforge.findbugs'
    }
    compile 'com.hazelcast:hazelcast-spring:+'
    compile 'org.checkerframework:checker:+'
    compile 'com.google.code.findbugs:jsr305:+'
    compile 'com.google.guava:guava:+'
    compile 'org.slf4j:slf4j-api:+'
    compile 'org.slf4j:jcl-over-slf4j:+'
    compile 'ch.qos.logback:logback-classic:+'
    compile 'jline:jline:+'
    compile 'org.jgrapht:jgrapht-core:+'
    compile 'com.beust:jcommander:+'
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.3"
}

task console(dependsOn: 'classes') << {
    def classpath = sourceSets.main.runtimeClasspath + configurations.runtime

    def command = [
            'java',
            '-enableassertions',
            '-cp', classpath.collect().join(System.getProperty('path.separator')),
            '-Dlogback.configurationFile=org/age/console/logback.groovy',
            'org.age.console.ConsoleBootstrapper',
    ]

    def proc = new ProcessBuilder(command)
            .redirectOutput(ProcessBuilder.Redirect.INHERIT)
            .redirectInput(ProcessBuilder.Redirect.INHERIT)
            .redirectError(ProcessBuilder.Redirect.INHERIT)
            .start()

    proc.waitFor()

    if (0 != proc.exitValue()) {
        throw new RuntimeException("console exited with status: ${proc.exitValue()}")
    }
}

task node(type: JavaExec) {
    main = 'org.age.node.Bootstrapper'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs '-enableassertions'
    systemProperty "logback.configurationFile", "org/age/node/logback.groovy"
}

task standalone(dependsOn: 'classes') << {
    def classpath = sourceSets.main.runtimeClasspath + configurations.runtime

    def command = [
            'java',
            '-enableassertions',
            '-cp', classpath.collect().join(System.getProperty('path.separator')),
            '-Dlogback.configurationFile=org/age/console/logback.groovy',
            'org.age.console.StandaloneBootstrapper',
    ]

    def proc = new ProcessBuilder(command)
            .redirectOutput(ProcessBuilder.Redirect.INHERIT)
            .redirectInput(ProcessBuilder.Redirect.INHERIT)
            .redirectError(ProcessBuilder.Redirect.INHERIT)
            .start()

    proc.waitFor()

    if (0 != proc.exitValue()) {
        throw new RuntimeException("console exited with status: ${proc.exitValue()}")
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact(javadocJar)
            artifact(sourcesJar)
        }
    }
    repositories {
        maven {
            if (project.hasProperty("mavenUser")) {
                credentials {
                    username mavenUser
                    password mavenPassword
                }
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://repository.age.agh.edu.pl/content/repositories/snapshots"
            } else {
                url "https://repository.age.agh.edu.pl/content/repositories/releases"
            }
        }
    }
}

